---
- name: Setup dotfiles and development environment
  hosts: all
  gather_facts: true
  tasks:
    # ==== macOS setup tasks ====
    - name: Install macOS packages with Homebrew
      community.general.homebrew:
        name:
          - python
          - ansible-lint
          - bat
          - broot
          - eza
          - fd
          - fish
          - fzf
          - gcc
          - gh
          - git
          - htop
          - lazygit
          - neovim
          - opentofu
          - podlet
          - podman
          - podman-tui
          - ripgrep
          - tealdeer
          - tmux
          - uv
        state: present
      when: ansible_facts['os_family'] == 'Darwin'

    - name: Create macOS-specific gitignore_global
      ansible.builtin.copy:
        content: ".DS_Store\n"
        dest: "{{ ansible_env.HOME }}/.gitignore_global"
        mode: '0644'
      when: ansible_facts['os_family'] == 'Darwin'

    - name: Install macOS casks with Homebrew
      community.general.homebrew_cask:
        name:
          - ghostty
        state: present
      when: ansible_facts['os_family'] == 'Darwin'

    # ==== Fedora setup tasks ====
    - name: Enable COPR repositories
      community.general.copr:
        name: "{{ item }}"
        state: enabled
      loop:
        - pgdev/ghostty
        - atim/lazygit
      become: true
      when: ansible_facts['distribution'] == 'Fedora'

    - name: Install Fedora packages
      ansible.builtin.dnf:
        name:
          - ansible-lint
          - bat
          - broot
          - direnv
          - eza
          - fd-find
          - fish
          - flatpak
          - fzf
          - gcc
          - gh
          - ghostty
          - htop
          - lazygit
          - neovim
          - opentofu
          - podlet
          - podman-tui
          - ripgrep
          - tealdeer
          - tmux
          - tree
          - uv
        state: present
      become: true
      when: ansible_facts['distribution'] == 'Fedora'

    - name: Install Flatpak applications
      community.general.flatpak:
        name:
          - com.github.johnfactotum.Foliate
          - com.valvesoftware.Steam
          - com.github.tchx84.Flatseal
          - io.github.flattool.Warehouse
          - com.spotify.Client
          - md.obsidian.Obsidian
        state: present
      become: true
      when: ansible_facts['distribution'] == 'Fedora'

    - name: Create Foliate themes directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.var/app/com.github.johnfactotum.Foliate/config/com.github.johnfactotum.Foliate/themes"
        state: directory
        mode: '0755'
      when: ansible_facts['distribution'] == 'Fedora'

    - name: Copy Foliate theme
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/var/app/com.github.johnfactotum.Foliate/config/com.github.johnfactotum.Foliate/themes/tokyonight_night.json"
        dest: "{{ ansible_env.HOME }}/.var/app/com.github.johnfactotum.Foliate/config/com.github.johnfactotum.Foliate/themes/tokyonight_night.json"
        mode: '0644'
      when: ansible_facts['distribution'] == 'Fedora'

    # ==== Common tasks for both OS ====
    - name: Create config directories
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - fish
        - tmux
        - bat
        - bat/themes
        - ghostty
        - eza

    - name: Copy .gitconfig 
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/gitconfig"
        dest: "{{ ansible_env.HOME }}/.gitconfig"
        mode: '0644'

    - name: Copy config.fish
      ansible.builtin.template:
        src: "{{ playbook_dir }}/config/fish/config.fish"
        dest: "{{ ansible_env.HOME }}/.config/fish/"
        mode: '0644'

    - name: Copy fish_plugins
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/config/fish/fish_plugins"
        dest: "{{ ansible_env.HOME }}/.config/fish/"
        mode: '0644'

    - name: Copy bat config files
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/config/bat/"
        dest: "{{ ansible_env.HOME }}/.config/bat/"
        mode: '0644'

    - name: Copy tmux config
      ansible.builtin.copy:
        src: "files/tmux_config"
        dest: "{{ ansible_env.HOME }}/.config/tmux/tmux.conf"
        mode: '0644'

    - name: Build ghostty config
      ansible.builtin.template:
        src: "files/ghostty_config"
        dest: "{{ ansible_env.HOME }}/.config/ghostty/config"
        mode: '0644'

    - name: Update fish path in tmux config - macOS
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.config/tmux/tmux.conf"
        regexp: '^set -g default-shell.*'
        line: 'set -g default-shell /opt/homebrew/bin/fish'
      when: ansible_facts['os_family'] == 'Darwin'

    - name: Update fish path in ghostty config - macOS
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.config/ghostty/config"
        regexp: '^command =.*'
        line: 'command = /opt/homebrew/bin/fish'
      when: ansible_facts['os_family'] == 'Darwin'

    - name: Remove existing Neovim configuration directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ ansible_env.HOME }}/.config/nvim"
        - "{{ ansible_env.HOME }}/.local/share/nvim"
        - "{{ ansible_env.HOME }}/.local/state/nvim"
        - "{{ ansible_env.HOME }}/.cache/nvim"

    - name: Clone LazyVim starter
      ansible.builtin.git:
        repo: https://github.com/LazyVim/starter
        dest: "{{ ansible_env.HOME }}/.config/nvim"
        version: "main"
        clone: true

    - name: Remove .git directory from LazyVim
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/nvim/.git"
        state: absent

    - name: Update LazyVim extras configuration in lazy.lua
      ansible.builtin.blockinfile:
        path: ~/.config/nvim/lua/config/lazy.lua
        marker: "-- {mark} ANSIBLE MANAGED BLOCK"
        content: |
          {% for item in lazyvim_extras %}
              { import = "{{ item }}" },
          {% endfor %}
        insertafter: >
          { "LazyVim/LazyVim", import = "lazyvim.plugins" },
        backup: true
      vars:
        lazyvim_extras:
          - "lazyvim.plugins.extras.editor.fzf"
          - "lazyvim.plugins.extras.lang.ansible"
          - "lazyvim.plugins.extras.lang.docker"
          - "lazyvim.plugins.extras.lang.json"
          - "lazyvim.plugins.extras.lang.markdown"
          - "lazyvim.plugins.extras.lang.python"
          - "lazyvim.plugins.extras.lang.sql"
          - "lazyvim.plugins.extras.lang.terraform"
          - "lazyvim.plugins.extras.lang.toml"
          - "lazyvim.plugins.extras.lang.yaml"


    # Pull from repo directly
    # - name: Create symlink for bat TokyoNight theme
    #   ansible.builtin.file:
    #     src: "{{ ansible_env.HOME }}/.local/share/nvim/lazy/tokyonight.nvim/extras/sublime/tokyonight_night.tmTheme"
    #     dest: "{{ ansible_env.HOME }}/.config/bat/themes/tokyonight_night.tmTheme"
    #     state: link
    #     force: true
    #
    # - name: Create symlink for eza TokyoNight theme
    #   ansible.builtin.file:
    #     src: "{{ ansible_env.HOME }}/.local/share/nvim/lazy/tokyonight.nvim/extras/eza/tokyonight.yml"
    #     dest: "{{ ansible_env.HOME }}/.config/eza/tokyonight.yml"
    #     state: link
    #     force: true

    - name: Build bat cache
      ansible.builtin.command: bat cache --build
      changed_when: false

    - name: Set fish executable path based on OS
      ansible.builtin.set_fact:
        fish_executable: "{{ '/opt/homebrew/bin/fish' if ansible_facts['os_family'] == 'Darwin' else '/usr/bin/fish' }}"

    - name: Check if Fisher is installed
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.config/fish/functions/fisher.fish"
      register: fisher_installed

    - name: Install Fisher if not present
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish
        dest: "{{ ansible_env.HOME }}/.config/fish/functions/fisher.fish"
        mode: '0644'
      when: not fisher_installed.stat.exists

    - name: Install Fisher packages
      ansible.builtin.shell: "source {{ ansible_env.HOME }}/.config/fish/functions/fisher.fish && fisher install jorgebucaran/fisher"
      args:
        executable: "{{ fish_executable }}"
      register: fisher_install
      changed_when: "fisher_install.stdout is search('Installed')"
      when: not fisher_installed.stat.exists

    - name: Update Fisher packages
      ansible.builtin.shell: "fisher update"
      args:
        executable: "{{ fish_executable }}"
      register: fisher_update
      changed_when: "fisher_update.stdout is search('Updated')"
